0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.15.11
3 info using node@v4.7.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/haolchen/Documents/Coding/My/XXXXXXXX/usync',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/haolchen/.npm/usync/0.0.7/package.tgz not in flight; packing
9 verbose correctMkdir /Users/haolchen/.npm correctMkdir not in flight; initializing
10 verbose tar pack [ '/Users/haolchen/.npm/usync/0.0.7/package.tgz',
10 verbose tar pack   '/Users/haolchen/Documents/Coding/My/XXXXXXXX/usync' ]
11 verbose tarball /Users/haolchen/.npm/usync/0.0.7/package.tgz
12 verbose folder /Users/haolchen/Documents/Coding/My/XXXXXXXX/usync
13 info prepublish usync@0.0.7
14 verbose addLocalTarball adding from inside cache /Users/haolchen/.npm/usync/0.0.7/package.tgz
15 verbose correctMkdir /Users/haolchen/.npm correctMkdir not in flight; initializing
16 silly cache afterAdd usync@0.0.7
17 verbose afterAdd /Users/haolchen/.npm/usync/0.0.7/package/package.json not in flight; writing
18 verbose correctMkdir /Users/haolchen/.npm correctMkdir not in flight; initializing
19 verbose afterAdd /Users/haolchen/.npm/usync/0.0.7/package/package.json written
20 silly publish { name: 'usync',
20 silly publish   version: '0.0.7',
20 silly publish   description: 'A lightweight library used for clearer task control',
20 silly publish   main: 'dist/Usync.js',
20 silly publish   scripts:
20 silly publish    { dev: 'node build/build.js -d',
20 silly publish      build: 'node build/build.js -p',
20 silly publish      devtool: 'devtool examples/index.js --watch',
20 silly publish      example: 'node examples/index.js',
20 silly publish      release: 'node build/release.js' },
20 silly publish   devDependencies:
20 silly publish    { chalk: '^2.0.1',
20 silly publish      figlet: '^1.2.0',
20 silly publish      ora: '^1.3.0',
20 silly publish      shelljs: '^0.7.8',
20 silly publish      'ts-loader': '^2.2.2',
20 silly publish      typescript: '^2.4.1',
20 silly publish      webpack: '^3.1.0',
20 silly publish      'webpack-merge': '^4.1.0',
20 silly publish      yargs: '^7.0.2' },
20 silly publish   author: { name: 'toxichl' },
20 silly publish   license: 'MIT',
20 silly publish   readme: '<p aligh="center">\n    <pre style="background-color: #fff;">\n      _   _  ____ __   __ _   _   ____\n     | | | |/ ___|\\ \\ / /| \\ | | / ___|\n     | | | |\\___ \\ \\ V / |  \\| || |\n     | |_| | ___) | | |  | |\\  || |___\n      \\___/ |____/  |_|  |_| \\_| \\____|\n    </pre>\n</div>\n\n## Usages\n\nHere are three tasks that may contain asynchronous code\n\n```js\nfunction task1() {}\nfunction task2() {}\nfunction task3() {}\n```\n\nIf the three tasks share one or more global state, and needs to be strictly executed serially, This time, you will need Usync:\n\n```js\n// Intialize state, state can be a object or an array\n// The state will be passed into every task\'s controller as arguments \nvar app = Usync.app(state)\n\n// Define task execution order\napp.use(task1)\n   .use(task2)\n   .use(task3)\n    \n// Run app \napp.start()  \n```\n\nAt this point, you can write task controller like this (`next` style likes `generator` ?):\n\n```js\nfunction task1(state, next) {\n    // ... Async or Sync Code\n    \n    // Call next() to execute the next task\n    next()\n}\n```\n\nThen task will be strictly executed in accordance with the order you `use()`\n\nWhat are the benefits? In the life cycle of the whole task, you don\'t need to define any variables, just hand it to the `state`. So, you can hide the details of each task (separate tasks to files), and only need to focus on the holistic task process.\n\n## API\n\n# `Usync.app(state)`\n- `state` Array | Object | String | undefined\n- `return value` a intance of Usync\n\n```js\nvar app = Usync.app()\n```\n\nIf `state` is empty, so will generate an empty `state` object by default. the `state` will shuttle throughout the whole life cycle.\n\n\n# `app.use(taskHandler)`\n- `taskHandler` Function | Usync Instance\n- `return value` this\n\nif the task handler is a function, the parameters of the function as follows:\n\n    state1 , state2, ... , next\n\nThe number of state parameters depends on the number of object passed in at initialization.\n\nIf you initialize as follows:\n\n    var app = Usync.app(A)\n    \nthen You can write your task handler like this:\n\n```js\nfunction task(A , next) {\n    // Do something\n    \n    next()  \n}\n\napp.use(task)\n```\n\nAnd if you write this:\n\n    var app = Usync.app(A, B, C)\n    \nYou can use:\n\n```js\nfunction task(A, B, C, next) {\n    // Do something\n    \n    next()  \n}\n\napp.use(task)\n```\n',
20 silly publish   readmeFilename: 'README.md',
20 silly publish   gitHead: '7e80297ac16185273c6ddf17b55341b5e4f6eaa8',
20 silly publish   _id: 'usync@0.0.7',
20 silly publish   _shasum: 'ad601c45f44cad4df73bc29deb0e31a5b5b2d76a',
20 silly publish   _from: '.' }
21 verbose getPublishConfig undefined
22 silly mapToRegistry name usync
23 silly mapToRegistry using default registry
24 silly mapToRegistry registry https://registry.npmjs.org/
25 silly mapToRegistry data Result {
25 silly mapToRegistry   raw: 'usync',
25 silly mapToRegistry   scope: null,
25 silly mapToRegistry   name: 'usync',
25 silly mapToRegistry   rawSpec: '',
25 silly mapToRegistry   spec: 'latest',
25 silly mapToRegistry   type: 'tag' }
26 silly mapToRegistry uri https://registry.npmjs.org/usync
27 verbose publish registryBase https://registry.npmjs.org/
28 silly publish uploading /Users/haolchen/.npm/usync/0.0.7/package.tgz
29 verbose request uri https://registry.npmjs.org/usync
30 verbose request sending authorization for write operation
31 info attempt registry request try #1 at 6:19:06 PM
32 verbose request using bearer token for auth
33 verbose request id cf4b4443aabf94d9
34 http request PUT https://registry.npmjs.org/usync
35 http 200 https://registry.npmjs.org/usync
36 verbose headers { 'content-type': 'application/json',
36 verbose headers   'content-encoding': 'gzip',
36 verbose headers   'cache-control': 'max-age=300',
36 verbose headers   'transfer-encoding': 'chunked',
36 verbose headers   'accept-ranges': 'bytes',
36 verbose headers   date: 'Tue, 11 Jul 2017 10:19:55 GMT',
36 verbose headers   via: '1.1 varnish',
36 verbose headers   connection: 'keep-alive',
36 verbose headers   'x-served-by': 'cache-dfw1834-DFW',
36 verbose headers   'x-cache': 'MISS',
36 verbose headers   'x-cache-hits': '0',
36 verbose headers   'x-timer': 'S1499768393.965499,VS0,VE2748',
36 verbose headers   vary: 'Accept-Encoding, Accept' }
37 verbose request invalidating /Users/haolchen/.npm/registry.npmjs.org/usync on PUT
38 info publish usync@0.0.7
39 verbose stack Error: write EPIPE
39 verbose stack     at exports._errnoException (util.js:907:11)
39 verbose stack     at WriteWrap.afterWrite (net.js:787:14)
40 verbose cwd /Users/haolchen/Documents/Coding/My/XXXXXXXX/usync
41 error Darwin 16.6.0
42 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
43 error node v4.7.0
44 error npm  v2.15.11
45 error code EPIPE
46 error errno EPIPE
47 error syscall write
48 error write EPIPE
49 error If you need help, you may report this error at:
49 error     <https://github.com/npm/npm/issues>
50 verbose exit [ 1, true ]
